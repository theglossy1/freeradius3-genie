#!/usr/bin/env bash
#
###     configure system to use networkradius.com binary packages these are newer than those supplied by ubuntu     ###
#
###     determine the distribution and version and setup the networkradius repo if needed    ###
#
if [ ! $UID = 0 ]; then
    echo This must be run as root
    exit 1
fi

LSB_RELEASE=$(lsb_release -d | cut -f2)
if echo $LSB_RELEASE | grep -q 'Ubuntu.*20.04'; then
    if cat /etc/apt/sources.list | grep -q networkradius; then
        echo "networkradius package repo is already present in (/etc/apt/sources.list)"
    else
        echo "adding networkradius repo (deb https://packages.networkradius.com/releases/ubuntu-focal focal main) to (/etc/apt/sources.list)"
        echo 'deb [trusted=yes] https://packages.networkradius.com/releases/ubuntu-focal focal main' >> /etc/apt/sources.list
    fi
elif echo $LSB_RELEASE | grep -q 'Ubuntu.*18.04'; then
    if cat /etc/apt/sources.list | grep -q networkradius; then
        echo "networkradius package repo is already present in (/etc/apt/sources.list)"
    else
        echo "adding ( https://packages.networkradius.com/releases/ubuntu-bionic bionic main) to (/etc/apt/sources.list)"
        echo 'deb [trusted=yes] https://packages.networkradius.com/releases/ubuntu-bionic bionic main' >> /etc/apt/sources.list
    fi
    # add additional repo for new php needed for new composer
    if [ -s /etc/apt/sources.list.d/ondrej-ubuntu-php-bionic.list ]; then
        echo "ondrej-ubuntu-php package repo is already present in (/etc/apt/sources.list.d/)"
    else
        echo "creating the repo file with the address ( http://ppa.launchpad.net/ondrej/php/ubuntu bionic main) to (/etc/apt/sources.list.d/ondrej-ubuntu-php-bionic.list)"
        echo 'deb http://ppa.launchpad.net/ondrej/php/ubuntu bionic main' >> /etc/apt/sources.list.d/ondrej-ubuntu-php-bionic.list
        echo 'deb-src http://ppa.launchpad.net/ondrej/php/ubuntu bionic main' >> /etc/apt/sources.list.d/ondrej-ubuntu-php-bionic.list

        export APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
        if apt-key list | grep -q 'E526 7A6C'
            then
                echo "the ondrej php repo gpg key was found"
            else
                echo "the ondrej php repo gpg key was not found we will add it to the local keyring now "
                apt-key adv --keyserver keyserver.ubuntu.com --recv-key 0xE5267A6C
            if apt-key list | grep -q 'E526 7A6C'
            then
                echo "the ondrej php gpg key was added successfully"
            else
                echo "something went wrong while adding the ondrej php gpg key"
                exit 1
            fi
        fi
    fi
else
    echo Sorry, this tool currently only supports Ubuntu 18.04 or 20.04.
    exit 1
fi

#
###     import networkradius.com pgp key    ###
#

export APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
if apt-key list | grep -q networkradius; then
        echo "the networkradius repo gpg key was found"
else
    echo "the networkradius repo gpg key was not found we will add it to the local keyring now "
    apt-key adv --keyserver keyserver.ubuntu.com --recv-key 0x41382202
    if apt-key list | grep -q '4138 2202'; then
        echo "the networkradius gpg key was added successfully"
    else
        echo "something went wrong while adding the network radius gpg key"
        exit 1
    fi
fi

#
###     main package setup      ###
#

apt-get update --yes
apt-get upgrade --yes
apt-get install --yes php-cli php-mbstring php-mysql php-curl unzip mariadb-server mariadb-client
apt-cache policy freeradius | grep -q networkradius
if [ $? = 1 ]; then
    echo -e "ERROR:\n"
    echo "The apt policy for freeradius would install distribution provided packages."
    echo "Please check/correct the apt config to install the NetworkRADIUS binaries."
    echo "You can check the policy using the command: 'apt-cache policy freeradius'"
    exit 1
fi

apt-get install --yes freeradius freeradius-common freeradius-utils freeradius-mysql

#
###     test for an existing swap device or file, if none exists we will create one     ###
#

if cat /etc/fstab | grep -q swap; then
    echo "swap was found in fstab"
    if free | grep -qP '^Swap:\s+[0-9]{2,}'; then
        echo "swap is enabled"
    else
        echo "swap was not enabled/sufficient. Enabling now..."
        swapon -a
    fi
else
    echo "no swap found in fstab we will now create and enable a swapfile"
    /usr/bin/fallocate -l 4G /swapfile
    /bin/chmod 600 /swapfile
    /sbin/mkswap /swapfile
    /sbin/swapon /swapfile
    echo '/swapfile none swap sw 0 0' >> /etc/fstab
fi

#
###     setup sysctl    ###
#

if grep -q vm.swappiness /etc/sysctl.conf; then
    echo "vm.swappiness found in sysctl.conf "
    if sysctl -a | grep -q swappiness
        then
            echo "vm.swappiness appears enabled"
        else
            echo "vm.swappiness appears disabled we will enable it "
            /sbin/sysctl vm.swappiness=10
    fi
else
    echo "vm.swappiness was not found in sysctl.conf we will add and enable it now"
    echo 'vm.swappiness=10' >> /etc/sysctl.conf
    /sbin/sysctl vm.swappiness=10
fi


if grep -q vm.vfs_cache_pressure /etc/sysctl.conf; then
    echo "vm.vfs_cache_pressure found in sysctl.conf "
    if  sysctl -a &> /dev/stdout | grep -q vm.vfs_cache_pressure
        then
            echo "vm.vfs_cache_pressure appears enabled"
        else
            echo "vm.vfs_cache_pressure appears disabled we will enable it "
            /sbin/sysctl vm.vfs_cache_pressure=50
    fi
else
    echo "vm.vfs_cache_pressure was not found in sysctl.conf we will add and enable it now"
    echo 'vm.vfs_cache_pressure=50' >> /etc/sysctl.conf
    /sbin/sysctl vm.vfs_cache_pressure=50
fi

#
###     setup the sql server enviroment (mariadb/mysql)     ###
#

if [ -s .env ]; then
    echo "The .env file already exists and has a non zero size you should check its contents"
else
    echo "Launching /usr/bin/mysql_secure_installation script to secure the database installation"
    /usr/bin/mysql_secure_installation
    echo -e "\n"
    read -ep "Re-enter the root DB password from above: " DB_PWD
    echo MYSQL_PASSWORD=$DB_PWD > .env
    chmod 660 .env
    chown root:adm .env
fi

echo -e "\nAll initial package install tasks have completed."
echo -e "Now run './genie' to configure FreeRADIUS 3\n"
